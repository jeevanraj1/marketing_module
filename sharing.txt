import React, { useState } from 'react'
import { Grid, Typography, Paper, Button, Box, TextField, Stack } from '@mui/material'
import { DataGrid } from '@mui/x-data-grid'
import ModeEditOutlineRoundedIcon from "@mui/icons-material/ModeEditOutlineRounded";
import { officerApi } from '../../../Api';
import Swal from 'sweetalert2';

const textFiledStyle = {
    width: "100%",
    "& .MuiOutlinedInput-root": {
        "& fieldset": { borderColor: "black", borderWidth: "2px" },
    },
    "& .MuiInputLabel-root": {
        color: "black",
        "&.Mui-focused": {
            transform: "translate(14px, -10px)",
        },
    },
    "& input, & label": {
        height: "15px",
        display: "flex",
        alignItems: "center",
        fontSize: 12,
        fontWeight: "bold",
    },
}
export default function OfficerDT() {
    const [rows, SetRows] = React.useState([])
    const [formData, setFormData] = React.useState({
        officerName: '',
        officerZone: '',
    })
    const [saveButton, SetSaveButton] = React.useState(true)
    const [updateButton, SetUpdateButton] = React.useState(false)
    const [officerCode, setOfficerCode] = React.useState(null)
    const [errors, setErrors] = useState({})

    const getRowClassName = (params) => {
        const rowIndex = params.indexRelativeToCurrentPage;
        return rowIndex % 2 === 0 ? "row-even" : "row-odd";
    };

    const columns = [
        {
            field: "action",
            headerName: "Action",
            width: 69,
            renderCell: (params) => (
                <>
                    <ModeEditOutlineRoundedIcon
                        sx={{ color: "blue", marginRight: 2 }}
                        style={{
                            cursor: "pointer",
                            opacity: 1,
                            transition: "opacity 0.3s",
                        }}
                        onMouseOver={(e) => {
                            e.currentTarget.style.opacity = 0.7;
                            e.currentTarget.style.color = "lightblue";
                        }}
                        onMouseOut={(e) => {
                            e.currentTarget.style.opacity = 1;
                            e.currentTarget.style.color = "blue";
                        }}
                        onClick={() => { handleEdit(params.row) }}
                    >
                        Edit
                    </ModeEditOutlineRoundedIcon>

                </>
            ),
        },
        {
            field: 'officer_code',
            headerName: 'Officer Code',
            width: 200,
        },
        {
            field: 'officer_name',
            headerName: 'Officer Name',
            width: 150,
        },
        {
            field: 'zone_code',
            headerName: 'Zone Code',
            width: 100,
            type: 'number',
        },
    ];

    const [columnVisibilityModel, setColumnVisibilityModel] = React.useState({
        officer_code: false,
    });


    const handleEdit = (row) => {
        setFormData((prevdata) => ({
            ...prevdata,
            officerName: row.officer_name,
            officerZone: row.zone_code
        }))
        setOfficerCode(row.officer_code)
        SetUpdateButton(true)
        SetSaveButton(false)
    }
    const fetchData = async () => {
        try {
            const respone = await officerApi.officerApi_master().fetchAll()
            if (respone.status === 200) {
                SetRows(respone.data.items)
            }
        } catch (error) {
            console.log(error);
        }
    }


    const handleFiledChange = (fieldName, value) => {
        setErrors((prevErrors) => ({
            ...prevErrors,
            [fieldName]: "",
        }));
        if (fieldName === "officerName" && value.length <= 3) {
            setErrors((prevErrors) => ({
                ...prevErrors,
                officerName: 'Value must greater than 3 charaters',
            }));
            setFormData((prevdata) => ({
                ...prevdata,
                [fieldName]: value
            }))
        }
        else if (fieldName === "officerName" && value.length > 3) {

            setErrors((prevErrors) => ({
                ...prevErrors,
                officerName: '',
            }));
            setFormData((prevdata) => ({
                ...prevdata,
                [fieldName]: value
            }))
        }


        if (fieldName === "officerZone" && value.length > 3) {
            setErrors((prevErrors) => ({
                ...prevErrors,
                officerZone: 'Value must within than 3 digits',
            }));
            setTimeout(() => {
                setErrors((prevErrors) => ({
                    ...prevErrors,
                    officerZone: '',
                }));
            }, 1000);
        }
        else if (fieldName === "officerZone" && value.length <= 3) {

            setErrors((prevErrors) => ({
                ...prevErrors,
                officerZone: '',
            }));
            setFormData((prevdata) => ({
                ...prevdata,
                [fieldName]: value
            }))
        }

    }

    const handleClear = () => {
        setFormData((prevdata) => ({
            ...prevdata,
            officerName: "",
            officerZone: ""
        }))
        SetSaveButton(true)
        SetUpdateButton(false)
        setErrors((prevErrors) => ({
            ...prevErrors,
            officerName: '',
            officerZone: ""
        }));
    }

    const validation = () => {
        const newErrors = {}
        if (formData.officerName === "") {
            newErrors.officerName = "Requried"
        }
        else if (formData.officerName !== "") {
            newErrors.officerName = errors.officerName
        }

        if (formData.officerZone === "") {
            newErrors.officerZone = "Requried"
        } else if (formData.officerZone !== "") {
            newErrors.officerZone = errors.officerZone
        }

        return newErrors
    }

    const handlesave = async (e) => {
        e.preventDefault()
        const validationErorrs = validation()
        setErrors(validationErorrs)
        const hasErrors = Object.values(validationErorrs).some(error => error !== "" && error !== null)
        if (!hasErrors) {
            const newrecord = {
                officer_name: formData.officerName,
                zone_code: Number(formData.officerZone)
            }
            try {
                const respone = await officerApi.officerApi_master().create(newrecord)
                if (respone.data.Status === 1) {
                    Swal.fire("sucess", "Saved Sucessfully", "success")
                    handleClear()
                    fetchData()
                } else {
                    Swal.fire('Error' `${respone.data.Error}`, 'error')
                }
            } catch (error) {
                Swal.fire("error", `Unknown Error`, "error")
            }
        }
    }

    const handleUpdate = async (e) => {
        e.preventDefault()
        const validationErorrs = validation()
        setErrors(validationErorrs)
        const hasErrors = Object.values(validationErorrs).some(error => error !== "" && error !== null)
        if (!hasErrors) {
            const newrecord = {
                officer_name: formData.officerName,
                zone_code: Number(formData.officerZone)
            }
            try {
                const respone = await officerApi.officerApi_master().update(officerCode, newrecord)
                if (respone.data.Status === 1) {
                    Swal.fire("sucess", "Updated Sucessfully", "success")
                    handleClear()
                    fetchData()
                } else {
                    Swal.fire('Error' `${respone.data.Error}`, 'error')
                }
            } catch (error) {
                Swal.fire("error", `Unknown Error`, "error")
            }
        }
    }

    React.useEffect(() => {
        fetchData()
        document.title = "Officer"
    }, [])
    return (
        <>
            <Grid container spacing={2}>
                <Grid item md={7} lg={7} sm={12} xs={12}>
                    <Paper sx={{ padding: 2 }}>
                        <Grid container spacing={2}>
                            {/* =========================Relation  Master======================== */}
                            <Grid item md={12} lg={12} sm={12} xs={12}>
                                <Typography variant='h5'>
                                    Officers Master
                                </Typography>
                            </Grid>
                            {/* =========================Officer Name======================== */}
                            <Grid item md={4} lg={4} sm={12} xs={12}>
                                <TextField
                                    id="outlined-basic"
                                    label="Officer Name"
                                    variant="outlined"
                                    size='small'
                                    name='officerName'
                                    required
                                    fullWidth
                                    inputProps={{ maxLength: 40 }}
                                    sx={textFiledStyle}
                                    value={formData.officerName || ""}
                                    onChange={(e) => handleFiledChange("officerName", e.target.value.toUpperCase().trim())}
                                    error={Boolean(errors.officerName)}
                                    helperText={errors.officerName}
                                />
                            </Grid>
                            {/* =========================Officer Zone======================== */}
                            <Grid item md={4} lg={4} sm={12} xs={12}>
                                <TextField
                                    id="outlined-basic"
                                    label="Officer Zone"
                                    variant="outlined"
                                    size='small'
                                    name='officerZone'
                                    inputProps={{ maxLength: 3 }}
                                    required
                                    fullWidth
                                    sx={textFiledStyle}
                                    value={formData.officerZone || ''}
                                    onChange={(e) => handleFiledChange("officerZone", e.target.value.replace(/[^0-9]/g, '').trim())}
                                    error={Boolean(errors.officerZone)}
                                    helperText={errors.officerZone}
                                />
                            </Grid>
                            {/* =========================Button======================== */}
                            <Grid item md={12} lg={12} sm={12} xs={12}>
                                <Stack direction="row" spacing={2}>
                                    {saveButton && (
                                        <Button
                                            variant="contained"
                                            type='submit'
                                            size='small'
                                            onClick={handlesave}
                                        >
                                            Save
                                        </Button>
                                    )}
                                    {updateButton && (
                                        <Button
                                            variant="contained"
                                            type='submit'
                                            size='small'
                                            onClick={(e) => handleUpdate(e)}
                                        >
                                            Update
                                        </Button>
                                    )}

                                    <Button
                                        variant="contained"
                                        color="error"
                                        size='small'
                                        onClick={() => handleClear()}
                                    >
                                        Clear
                                    </Button>
                                </Stack>
                            </Grid>
                        </Grid>
                    </Paper>
                    <Grid xs={12} sm={12} md={12} lg={12}>
                        <Box sx={{ height: 340, width: '100%', marginTop: '20px' }}>
                            <DataGrid
                                rows={rows}
                                columns={columns}
                                getRowId={(row) => row.officer_code.toString()}
                                initialState={{
                                    pagination: {
                                        paginationModel: {
                                            pageSize: 10,
                                        },
                                    },
                                }}
                                columnVisibilityModel={columnVisibilityModel}
                                onColumnVisibilityModelChange={(newModel) =>
                                    setColumnVisibilityModel(newModel)
                                }
                                pageSizeOptions={[10, 20]}
                                disableRowSelectionOnClick
                                getRowHeight={() => 35}
                                getRowClassName={getRowClassName}
                            />
                        </Box>
                    </Grid>
                </Grid>
            </Grid>
        </>
    )
}

=========================================paymode========================
import { Paper } from "@mui/material";
import React from "react";
import Grid from "@mui/material/Grid";
import Typography from "@mui/material/Typography";
import TextField from "@mui/material/TextField";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";
import { DataGrid } from "@mui/x-data-grid";
import ModeEditOutlineRoundedIcon from "@mui/icons-material/ModeEditOutlineRounded";
import DeleteForeverIcon from "@mui/icons-material/DeleteForever";
import { useEffect } from "react";
import { paymode_Api } from "../../../Api";
import { useState } from 'react';
import Swal from "sweetalert2";

export default function PayModeDT() {
    const [rows, setRows] = useState([]);
    const [errors, setErrors] = useState({});
    const [pay_id, setPay_id] = useState(null);
    const [edit, setEdit] = useState(false);
    const [saveButton, setSaveButton] = useState(true);
    const [updateButton, setUpdateButton] = useState(false);

    const [formData, setFormData] = useState({
        paymode: '',
        description: '',
    });

    const HandleEdit = async (pay_id, pay_mode, description) => {
        setPay_id(pay_id);
        setFormData({
            paymode: pay_mode,
            description: description,
        });
        setSaveButton(false);
        setUpdateButton(true);
        setEdit(true);
    }
    console.log(errors);
    const getRowClassName = (params) => {
        const rowIndex = params.indexRelativeToCurrentPage;
        return rowIndex % 2 === 0 ? "row-even" : "row-odd";
    };
    const columns = [
        {
            field: "action",
            headerName: "Action",
            width: 100,
            renderCell: (params) => (
                <>
                    <ModeEditOutlineRoundedIcon
                        sx={{ color: "blue", marginRight: 2 }}
                        style={{
                            cursor: "pointer",
                            opacity: 1,
                            transition: "opacity 0.3s",
                        }}
                        onMouseOver={(e) => {
                            e.currentTarget.style.opacity = 0.7;
                            e.currentTarget.style.color = "lightblue";
                        }}
                        onMouseOut={(e) => {
                            e.currentTarget.style.opacity = 1;
                            e.currentTarget.style.color = "blue";
                        }}
                        onClick={() =>
                            HandleEdit(
                                params.row.pay_id,
                                params.row.pay_mode,
                                params.row.description,
                            )
                        }
                    >
                        Edit
                    </ModeEditOutlineRoundedIcon>
                    {/* <DeleteForeverIcon
            sx={{ color: "red" }}
            style={{
              cursor: "pointer",
              opacity: 1,
              transition: "opacity 0.3s",
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.opacity = 0.7;
              e.currentTarget.style.color = "rgba(255, 0, 0, 0.7)";
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.opacity = 1;
              e.currentTarget.style.color = "red";
            }}
            // onClick={() => handleDeleteButtonClick(params.row.slab_id)}
          >
            Delete
          </DeleteForeverIcon> */}
                </>
            ),
        },
        {
            field: 'pay_id',
            headerName: 'pay_id',
            width: 150,
            align: "right"
        },
        {
            field: 'pay_mode',
            headerName: 'Pay Mode',
            width: 150,
        },
        {
            field: 'description',
            headerName: 'Description',
            width: 150,
        },
    ];

    const [columnVisibilityModel, setColumnVisibilityModel] = React.useState({
        pay_id: false,
    });

    const handleFieldChange = (fieldName, value) => {


        setErrors((prevErrors) => ({
            ...prevErrors,
            [fieldName]: "",
        }));


        if (fieldName === 'paymode' && value.length > 2) {
            setErrors((prevErrors) => ({
                ...prevErrors,
                paymode: 'Value must be 2 characters or less',
            }));
            setTimeout(() => {
                setErrors("");
            }, 1000);
        } else {
            setErrors((prevErrors) => ({
                ...prevErrors,
                paymode: '',
            }));
            setFormData({
                ...formData,
                [fieldName]: value,
            });
        }

    };


    const fetch_paymode = async () => {
        try {
            const response = await paymode_Api.paymode().fetchAll();
            console.log(response);
            if (response.status === 200) {
                setRows(response.data.items)
            }
        } catch (error) {
            console.log(error);
        }
    }

    const HandelSave = async () => {
        if (!formData.paymode.trim()) {
            setErrors({ paymode: "*Required" });
            return;
        }
        
            try {
                const newRecord = {
                    pay_mode: formData.paymode,
                    description: formData.description,
                };
                console.log(newRecord);
                const response = await paymode_Api.paymode().create(newRecord);
                console.log(response.data);
                if (response.data.Status === 1) {
                    Swal.fire("", "Saved Successfully", "success");
                    localStorage.setItem("Navigation_state", true);
                    fetch_paymode()
                    setFormData({
                        paymode: '',
                        description: '',
                    });
                } else {
                    Swal.fire("", response.data.Error, "error");
                }
            } catch (error) {
                Swal.fire("", `${error}`, "error");
            }
        
    }

    const HandelUpdate = async () => {
        try {
            const newRecord = {
                pay_mode: formData.paymode,
                description: formData.description,
            };
            const response = await paymode_Api.paymode().update(pay_id, newRecord)
            console.log(response);
            if (response.data.Status === 1) {
                Swal.fire("", "Updated Successfully", "success");
                localStorage.setItem("Navigation_state", true);
                fetch_paymode()
                setFormData({
                    paymode: '',
                    description: '',
                });
                setSaveButton(true);
                setUpdateButton(false)
            } else {
                Swal.fire("", response.data.Error, "error");
            }
        } catch (error) {
            console.log(error);
        }
    }

    const HandleClear = () => {
        setFormData({
            paymode: '',
            description: '',
        });
        setSaveButton(true);
        setUpdateButton(false)
        setErrors({});
        localStorage.setItem("Navigation_state", true);
    }

    useEffect(() => {
        fetch_paymode()
    }, []);

    return (
        <>
            {/* ============================================================================  */}
            {/* fields start  */}
            <div>
                <Grid container spacing={3}>
                    <Grid item xs={12} sm={12} md={10} lg={10}>
                        <Paper elevation={3} sx={{ width: "100%", marginTop: "-30px" }}>
                            <Grid
                                container
                                spacing={2}
                                marginTop={3}
                                sx={{ padding: "20px", paddingTop: "1px" }}
                            >
                                <Grid item xs={12} sm={12} md={12} sx={{ marginBottom: "0" }}>
                                    <Typography variant="h5">Pay Mode</Typography>
                                </Grid>
                                {/* ====================  */}

                                <Grid item xs={12} sm={12} md={3} lg={3}>
                                    <TextField id="outlined-basic"
                                        label="Pay Mode"
                                        variant="outlined"
                                        size="small"
                                        fullWidth
                                        name="paymode"
                                        value={formData.paymode}
                                        inputProps={{ maxLength: 3 }}
                                        required
                                        sx={{
                                            width: "100%",
                                            "& .MuiOutlinedInput-root": {
                                                "& fieldset": { borderColor: "black", borderWidth: "2px" },
                                            },
                                            "& .MuiInputLabel-root": {
                                                color: "black",
                                                "&.Mui-focused": {
                                                    transform: "translate(14px, -5px)",
                                                },
                                            },
                                            "& input, & label": {
                                                height: "15px",
                                                display: "flex",
                                                alignItems: "center",
                                                fontSize: 12,
                                                fontWeight: "bold",
                                            },
                                        }}
                                        error={Boolean(errors.paymode)}
                                        helperText={errors.paymode || ""}
                                        onChange={(e) => handleFieldChange("paymode", e.target.value.toUpperCase().trim())}
                                    />
                                </Grid>

                                {/* ================ */}


                                <Grid item xs={12} sm={12} md={8} lg={8}>
                                    <TextField id="outlined-basic"
                                        label="Description"
                                        variant="outlined"
                                        size="small"
                                        fullWidth
                                        name="Description"
                                        value={formData.description}
                                        inputProps={{ maxLength: 40 }}
                                        sx={{
                                            size: "small",
                                            width: "100%",
                                            "& .MuiOutlinedInput-root": {
                                                "& fieldset": { borderColor: "black", borderWidth: "2px" },
                                            },
                                            "& .MuiInputLabel-root": {
                                                color: "black",
                                                "&.Mui-focused": {
                                                    transform: "translate(14px, -5px)",
                                                },
                                            },
                                            "& input, & label": {
                                                height: "14px",
                                                display: "flex",
                                                alignItems: "center",
                                                fontSize: 12,
                                                fontWeight: "bold",
                                            },
                                        }}
                                        error={Boolean(errors.description)}
                                        helperText={errors.description || ""}
                                        onChange={(e) => handleFieldChange("description", e.target.value.toUpperCase().trim())}
                                    />
                                </Grid>



                                <Grid item xs={12} sm={12} md={1} lg={1}>
                                </Grid>

                                {/* ================ */}

                                {saveButton && (
                                    <Grid item xs={12} sm={12} md={1} lg={1}>
                                        <Stack spacing={4} direction="row">
                                            <Button
                                                variant="contained"
                                                onClick={HandelSave}
                                                size="small"
                                            >
                                                Save
                                            </Button>
                                        </Stack>
                                    </Grid>
                                )}


                                {/* ================ */}

                                {updateButton && (
                                    <Grid item xs={12} sm={12} md={1} lg={1}>
                                        <Stack spacing={4} direction="row" >
                                            <Button
                                                variant="contained"
                                                size="small"
                                                onClick={HandelUpdate}
                                            >
                                                Update
                                            </Button>
                                        </Stack>
                                    </Grid>
                                )}

                                {/* ================ */}

                                <Grid item xs={12} sm={12} md={1} lg={1} sx={{ marginLeft: -1 }} >
                                    <Stack spacing={2} direction="row">
                                        <Button
                                            variant="contained"
                                            color="error"
                                            onClick={HandleClear}
                                            size="small"
                                        >
                                            Clear
                                        </Button>
                                    </Stack>
                                </Grid>

                                {/* ================ */}
                            </Grid>
                        </Paper>
                        {/* grid End */}
                    </Grid>
                </Grid>

                {/* ======================================== */}

                <Grid container spacing={2} sx={{ marginTop: 0 }}>
                    <Grid item xs={12} sm={12} md={10} lg={10}>
                        <Paper elevation={3} sx={{ maxWidth: "100%" }}>
                            <div style={{ maxWidth: "auto", overflow: "auto" }}>
                                <DataGrid
                                    rows={rows}
                                    columns={columns}
                                    format="DD/MMM/YYYY"
                                    getRowId={(row) => row.pay_id.toString()}
                                    initialState={{
                                        pagination: {
                                            paginationModel: { page: 0, pageSize: 5 },
                                        },
                                    }}
                                    columnVisibilityModel={columnVisibilityModel}
                                    onColumnVisibilityModelChange={(newModel) =>
                                        setColumnVisibilityModel(newModel)
                                    }
                                    pageSizeOptions={[5, 10]}
                                    disableRowSelectionOnClick
                                    getRowHeight={() => 35}
                                    getRowClassName={getRowClassName}
                                />
                            </div>
                        </Paper>
                    </Grid>



                </Grid>
            </div>
            {/* fields End  */}
            {/* =========================================================================  */}
        </>
    );
}
====================================api========================================
export const paymode_Api = {
    paymode(url = "http://172.16.17.2:8080/ords/market/tbl/paymode") {
        return {
            fetchAll: () => axios.get(url),
            create: newRecord => axios.post(url, newRecord),
            update: (id, updateRecord) => axios.put(url + `?pay_id=${id}`, updateRecord),
        }
    }
}